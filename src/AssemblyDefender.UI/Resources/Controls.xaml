<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:AssemblyDefender.UI">


	<!--============================================================================================================-->
	<!--  Bruses -->
	<!--============================================================================================================-->
	<SolidColorBrush x:Key="LinkColor" Color="#0033c4" />
	<SolidColorBrush x:Key="ContextMenuBackgroundBrush" Color="#F5F5F5" />

	<!--============================================================================================================-->
	<!--  EmptyFocusVisual -->
	<!--============================================================================================================-->
	<Style x:Key="EmptyFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--============================================================================================================-->
	<!--  LinkButton -->
	<!--============================================================================================================-->
	<!-- Button is always underline -->
	<Style x:Key="LinkButton" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="{StaticResource LinkColor}" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}" >
					<TextBlock x:Name="ItemText" TextDecorations="Underline">
                        <ContentPresenter />
					</TextBlock>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							<Setter Property="Cursor" Value="Arrow" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Button is underline when mouse is over -->
	<Style x:Key="LinkButton2" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="{StaticResource LinkColor}" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<TextBlock x:Name="ItemText">
                        <ContentPresenter />
					</TextBlock>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" SourceName="ItemText" Value="True">
							<Setter Property="TextDecorations" TargetName="ItemText" Value="Underline" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							<Setter Property="Cursor" Value="Arrow" />
							<Setter Property="TextDecorations" TargetName="ItemText" Value="" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!--============================================================================================================-->
	<!--  Button -->
	<!--============================================================================================================-->
	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.5"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--============================================================================================================-->
	<!--  TextBlock -->
	<!--============================================================================================================-->
	<Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}" >
		<Setter Property="TextOptions.TextFormattingMode" Value="Display" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--============================================================================================================-->
	<!--  TextBox -->
	<!--============================================================================================================-->
	<ContextMenu x:Key="TextBoxContextMenu" Background="{StaticResource ContextMenuBackgroundBrush}">
		<MenuItem Command="ApplicationCommands.Copy" />
		<MenuItem Command="ApplicationCommands.Cut" />
		<MenuItem Command="ApplicationCommands.Paste" />
	</ContextMenu>
	<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
		<Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
		<Style.Triggers>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter Property="IsTabStop" Value="False" />
			</Trigger>
			<Trigger Property="Validation.HasError" Value="true">
				<Setter Property="ToolTip"
                        Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--============================================================================================================-->
	<!--  ComboBox -->
	<!--============================================================================================================-->
	<Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
		<Style.Triggers>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter Property="IsHitTestVisible" Value="False" />
				<Setter Property="IsTabStop" Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!--============================================================================================================-->
	<!--  Image -->
	<!--============================================================================================================-->
	<Style x:Key="{x:Type Image}" TargetType="{x:Type Image}" >
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.5" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
</ResourceDictionary>
